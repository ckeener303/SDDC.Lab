##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/registerNsxLocalWithNsxGlobal.yml
##
##      Notes: This module registers the NSX-T Local Manager to the NSX-T Global Manager
##
##       ToDo:
##          1) Replace thumbprint code with this API: https://vdc-download.vmware.com/vmwb-repository/dcr-public/d6de7a5e-636f-4677-8dbd-6f4ba91fa5e0/36b4881c-41cd-4c46-81d1-b2ca3a6c693b/api_includes/method_GetInfraSiteListenerCertificate.html
##          2) Figure out what the API call is to perform the importing of LM objects while also Pre-Pending the "<SiteCode>-" to all LM objects
---
- hosts: localhost
  name: registerNsxLocalWithNsxGlobal.yml
  tasks:
    - name: registerNsxLocalWithNsxGlobal_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d'|format(Pod.Number|int) }} ==================================

                                          Ansible Playbook: {{ ansible_play_name }}

             Nested_NSXT.Components.GlobalManager_VIP.FQDN: {{ Nested_NSXT.Components.GlobalManager_VIP.FQDN }}
           Nested_NSXT.Components.GlobalManager_VIP.VMName: {{ Nested_NSXT.Components.GlobalManager_VIP.VMName }}

              Nested_NSXT.Components.LocalManager_VIP.FQDN: {{ Nested_NSXT.Components.LocalManager_VIP.FQDN }}
            Nested_NSXT.Components.LocalManager_VIP.VMName: {{ Nested_NSXT.Components.LocalManager_VIP.VMName }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true


##
## Steps to obtain the NSX-T Local Manager Cluster API Certificate Thumbprint
##

    - name: Obtain NSX-T Local Manager API Cluster Certificate ID
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.LocalManager_VIP.FQDN }}/api/v1/cluster/api-certificate
        validate_certs: no
        timeout: 5
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: lm_api_cluster_cert_id_result
      until: lm_api_cluster_cert_id_result.status == 200
      retries: 10
      delay: 10
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true

    - name: Store Local Manager Cluster Certificate ID into variable for easier use
      ansible.builtin.set_fact:
        lm_cluster_cert_id: "{{ lm_api_cluster_cert_id_result.json.certificate_id }}"
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true
        - lm_api_cluster_cert_id_result.status == 200

    - name: Obtain API Cluster Certificate using ID
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.LocalManager_VIP.FQDN }}/api/v1/trust-management/certificates/{{ lm_cluster_cert_id }}
        validate_certs: no
        timeout: 5
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: lm_cluster_cert_result
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true

    - name: Store Local Manager Cluster Certificate (PEM format) into variable for easier use
      ansible.builtin.set_fact:
        lm_cluster_cert_pem: "{{ lm_cluster_cert_result.json.pem_encoded }}"
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true
        - lm_cluster_cert_result.status == 200

    - name: Obtain Information about Local Manager Cluster Certificate
      community.crypto.x509_certificate_info:
        content: "{{ lm_cluster_cert_pem }}"
      register: lm_cluster_cert_info
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true
        - lm_cluster_cert_result.status == 200

    - name: Store Local Manager Cluster Certificate SHA256 Thumbprint (without colons) for easier use
      ansible.builtin.set_fact:
        lm_cluster_api_cert_thumbprint: "{{ lm_cluster_cert_info.fingerprints['sha256'].replace(':','') | lower }}"
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true
        - lm_cluster_cert_result.status == 200

    - name: DEBUG -- Display Local Manager Cluster Certificate Thumbprint (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d'|format(Pod.Number|int) }} ==================================

           Local Manager Cluster Certificate Thumbprint: {{ lm_cluster_api_cert_thumbprint | default(None) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true


##
## Now that we have the Thumbprint, let's go use it
##

    - name: Verify that the NSX-T Global Manager cluster is "STABLE"
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.GlobalManager_VIP.FQDN | lower }}/api/v1/cluster/status
        validate_certs: no
        timeout: 5
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: result
      until: result.status == 200 and result.json.detailed_cluster_status.overall_status == "STABLE"
      retries: 60
      delay: 60
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true

    - name: Verify NSX-T Local Manager is compatible with NSX-T Global Manager
      nsxt_local_managers_compatibility:
        hostname: "{{ Nested_NSXT.Components.GlobalManager_VIP.FQDN }}"
        username: "{{ Nested_NSXT.Credential.admin.Name }}"
        password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: False
        site_connection_info:
          fqdn: "{{ Nested_NSXT.Components.LocalManager_VIP.FQDN }}"
          username: "{{ Nested_NSXT.Credential.admin.Name }}"
          password: "{{ Nested_NSXT.Credential.admin.Password }}"
          thumbprint: "{{ lm_cluster_api_cert_thumbprint }}"
      register: compatible_result
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true

    - name: DEBUG -- Display "nsxt_local_managers_compatibility" result (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display "compatible_result" ==================================

          {{ compatible_result }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Deploy.Product.NSXT.GlobalManager.Deploy == true

    - name: Register NSX-T Local Manager with NSX-T Global Manager
      nsxt_local_manager_registration:
        hostname: "{{ Nested_NSXT.Components.GlobalManager_VIP.FQDN }}"
        username: "{{ Nested_NSXT.Credential.admin.Name }}"
        password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: False
        display_name: "{{ Nested_NSXT.Components.LocalManager_VIP.VMName }}"
        id: "{{ Nested_NSXT.Components.LocalManager_VIP.VMName }}"
        site_connection_info:
          fqdn: "{{ Nested_NSXT.Components.LocalManager_VIP.FQDN }}"
          username: "{{ Nested_NSXT.Credential.admin.Name }}"
          password: "{{ Nested_NSXT.Credential.admin.Password }}"
          thumbprint: "{{ lm_cluster_api_cert_thumbprint }}"
        state: present
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true
        - compatible_result.version_compatible == true

    - name: Wait until the NSX-T API reports that the NSX-T Global Manager cluster is "STABLE"
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.GlobalManager_VIP.FQDN | lower }}/api/v1/cluster/status
        validate_certs: no
        timeout: 5
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: result
      until: result.status == 200 and result.json.detailed_cluster_status.overall_status == "STABLE"
      retries: 60
      delay: 10
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true

##
## LC: Not sure if the <full_sync_id> is always 'GM-2-LM-FULL-SYNC' on the LM
##
    - name: Wait until the NSX-T API reports that the NSX-T Local Manager cluster is Fully Synchronized with the Global Manager
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Components.LocalManager_VIP.FQDN | lower }}/policy/api/v1/infra/full-sync-states/GM-2-LM-FULL-SYNC
        validate_certs: no
        timeout: 5
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: result
      until: result.status == 200 and result.json.last_completed_stage == "COMPLETED"
      retries: 60
      delay: 10
      when:
        - Deploy.Product.NSXT.GlobalManager.Deploy == true
