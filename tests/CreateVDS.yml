---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: Attempt to create Pod vDS on physical vCenter
      community.vmware.vmware_dvswitch:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datacenter_name: "{{ Target.DataCenter }}"
        switch_name: "{{ Target.vSwitch }}"
        switch_version: "{{ Target.vSwitchVersion }}"
        uplink_quantity: 1
        discovery_operation: both
        discovery_protocol: lldp
        mtu: 9000
        state: present
      register: vds_result
      when: Target.Deployment == "vCenter"

## if vDS was created, vds_result.result == "DVS created"

    - name: DEBUG - Display vds_result
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================

          Variable: vds_result
          ====================
          {{ vds_result | to_nice_yaml }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Target.Deployment == "vCenter"
        - vds_result is defined

    - name: Authenticate to vCenter to obtain a Session ID
      ansible.builtin.uri:
        url: "https://{{ Target.FQDN }}/rest/com/vmware/cis/session"
        headers: "{ 'vmware-use-header-authn':'test' }"
        method: POST
        validate_certs: no
        timeout: 10
        force_basic_auth: yes
        url_username: "{{ Target.User }}"
        url_password: "{{ Target.Password }}"
        body_format: json
        return_content: yes
        status_code: 200
      register: vcenter_auth_result
      when:
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"

    - name: DEBUG - Display vcenter_auth_result
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================

          Variable: vcenter_auth_result
          =============================
          {{ vcenter_auth_result | to_nice_yaml }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Target.Deployment == "vCenter"
        - vcenter_auth_result is defined

    - name: Store vCenter Session ID for later use
      ansible.builtin.set_fact:
        vCenter_SessionID: "{{ vcenter_auth_result.json.value | default(None) }}"
      when:
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"


    - name: DEBUG - Display vCenter_SessionID
      ansible.builtin.pause:
        seconds: 1
        prompt: |
          =================================================================================================

          Variable: vCenter_SessionID
          ===========================
          {{ vCenter_SessionID | to_nice_yaml }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"
        - vCenter_SessionID is defined

##
## Add vSphere Cluster's Member Servers to the vDS
##

    - name: Get the vSphere Cluster's Object ID (MoREF)
      ansible.builtin.uri:
        url: "https://{{ Target.FQDN }}/rest/vcenter/cluster?filter.names={{ Target.Cluster }}"
        headers: "{ 'vmware-api-session-id':'{{ vCenter_SessionID }}' }"
        method: GET
        validate_certs: no
        timeout: 10
        force_basic_auth: yes
        url_username: "{{ Target.User }}"
        url_password: "{{ Target.Password }}"
        body_format: json
        return_content: yes
        status_code: 200
      register: cluster_info
      when:
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"

    - name: Display cluster_info
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================

          Variable: cluster_info
          ======================
          {{ cluster_info | to_nice_yaml }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"
        - cluster_info is defined

    - name: Store vSphere Cluster Object ID (MoREF) for later use
      ansible.builtin.set_fact:
        Cluster_ID: "{{ cluster_info.json.value[0].cluster | default(None) }}"
      when:
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"

    - name: Display Cluster_ID
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================

          Variable: Cluster_ID
          ====================
          {{ Cluster_ID }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"
        - Cluster_ID is defined

    - name: Get ESXi hosts in vSphere Cluster
      ansible.builtin.uri:
        url: "https://{{ Target.FQDN }}/rest/vcenter/host?filter.clusters={{ Cluster_ID }}"
        headers: "{ 'vmware-api-session-id':'{{ vCenter_SessionID }}' }"
        method: GET
        validate_certs: no
        timeout: 10
        force_basic_auth: yes
        url_username: "{{ Target.User }}"
        url_password: "{{ Target.Password }}"
        body_format: json
        return_content: yes
        status_code: 200
      register: cluster_hosts
      when:
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"

    - name: Display cluster_hosts
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================

          Variable: cluster_hosts
          =======================
          {{ cluster_hosts | to_nice_yaml }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"
        - cluster_hosts is defined

    - name: Add vSphere Cluster member hosts to vDS
      community.vmware.vmware_dvs_host:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        switch_name: "{{ Target.vSwitch }}"
        esxi_hostname: "{{ item.name }}"
        state: present
        vmnics: []
      loop: "{{ cluster_hosts.json.value }}"
      when:
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"
        - cluster_hosts is defined

##
## If vDS was created, notify user of actions required
##

    - name: If vDS created, display Action Notice
      ansible.builtin.pause:
        seconds: 10
        prompt: |
          =================================================================================================
          =======================================  ACTION REQUIRED  =======================================
          =================================================================================================

            The following vSphere Distributed Switch (vDS) was just automatically created for you:

                                                   {{ Target.vSwitch }}

            The script will now exit so that you can associate a vmnic interface to the vDS's uplink.  Once
            you have assocated a vmnic to the uplink of the vDS, please re-run the deploy.yml script.

            IMPORTANT: When you re-run the script, it will NOT verify that you have connected a vmnic as
                       an uplink to the vDS, or that you have configured it correctly.  If you do not
                       connect a vmnic as an uplink, or have an issue with it's configuration, the script
                       may eventually fail when you re-run it at some point during it's execution.

          =================================================================================================
      when:
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"

    - name: Exit Ansible playbook so user can perform their required actons
      ansible.builtin.meta: end_play
      when:
        - Target.Deployment == "vCenter"
        - vds_result.result == "DVS created"



##
## At this point, the vDS exists, so we can now create our PortGroups on it
##

    - name: Create a Management Distributed Port-Group in vCenter
      community.vmware.vmware_dvs_portgroup:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        switch_name: "{{ Target.vSwitch }}"
        portgroup_type: earlyBinding
        portgroup_name: "{{ Target.PortGroup.Management.Name }}"
        vlan_id: "{{ Target.PortGroup.Management.VLAN }}"
        vlan_trunk: false
        num_ports: 32
        state: present
        network_policy:
          promiscuous: "{{ Target.vSwitchVersion is version('6.5.0', '<=') }}"                         # 'true' if vSwitchVersion is <= 6.5.0
          forged_transmits: "{{ Target.vSwitchVersion is version('6.5.0', '<=') }}"                    # 'true' if vSwitchVersion is <= 6.5.0
          mac_changes: false
      when:
        - Target.Deployment == "vCenter"

    - name: Create a Trunk Distributed Port-Group in vCenter
      community.vmware.vmware_dvs_portgroup:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        switch_name: "{{ Target.vSwitch }}"
        portgroup_type: earlyBinding
        portgroup_name: "{{ Target.PortGroup.Trunk.Name }}"
        vlan_id: "{{ Target.PortGroup.Trunk.VLAN }}"
        vlan_trunk: true
        num_ports: 32
        state: present
        network_policy:
          promiscuous: "{{ Target.vSwitchVersion is version('6.5.0', '<=') }}"                         # 'true' if vSwitchVersion is <= 6.5.0
          forged_transmits: "{{ Target.vSwitchVersion is version('6.5.0', '<=') }}"                    # 'true' if vSwitchVersion is <= 6.5.0
          mac_changes: false
      when:
        - Target.Deployment == "vCenter"




    - name: Wait 10 seconds to see Port Groups
      ansible.builtin.pause: seconds=10


##
## Delete the vDS Port-Groups
##


    - name: Remove a Management Distributed Port-Group in vCenter
      community.vmware.vmware_dvs_portgroup:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        switch_name: "{{ Target.vSwitch }}"
        portgroup_type: earlyBinding
        portgroup_name: "{{ Target.PortGroup.Management.Name }}"
        vlan_id: "{{ Target.PortGroup.Management.VLAN }}"
        num_ports: 32
        state: absent
      ignore_errors: true
      when:
        - Target.Deployment == "vCenter"

    - name: Remove a Trunk Distributed Port-Group in vCenter
      community.vmware.vmware_dvs_portgroup:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        switch_name: "{{ Target.vSwitch }}"
        portgroup_type: earlyBinding
        portgroup_name: "{{ Target.PortGroup.Trunk.Name }}"
        vlan_id: "{{ Target.PortGroup.Trunk.VLAN }}"
        num_ports: 32
        state: absent
      ignore_errors: true
      when:
        - Target.Deployment == "vCenter"
